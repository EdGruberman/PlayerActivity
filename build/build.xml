<?xml version="1.0" encoding="UTF-8"?>
<project name="Bukkit plugin" default="default">
    <description>Bukkit plugin standard build management v5.1.0</description>
    <tstamp><format property="build.start" pattern="yyyy-MM-dd HH:mm:ss z" timezone="UTC" /></tstamp>


    <!-- ======== build configuration ======== -->

    <target name="-config" unless="src.dir" description="configure build environment">
        <property name="src.dir" location="../src" />
        <property name="resources.dir" location="../resources" />
        <property name="dist.dir" location="../dist" />
    
        <property name="build.dir" location="." />
        <property name="stage.dir" location="${build.dir}/stage" />
        <property name="version.properties" location="${build.dir}/version.properties" />
        <property prefix="plugin" file="${build.dir}/plugin.properties" />
    
        <condition property="install.dir" value="${plugin.install}">
           <isset property="plugin.install"/>
        </condition>
        <property name="install.dir" location="${bukkit.test}" />
        <property name="install-alt.dir" location="${install.dir}/update" />
    
        <path id="classpath">
            <fileset dir="." includes="lib/**" />
            <fileset dir="${bukkit.shared}" includes="**" />
        </path>
    </target>


    <!-- ======== version life cycle management ( alpha > beta > candidate > release ) ======== -->

    <target name="default" description="increment build version and install" depends="current,install" />

    <target name="current" description="#.#.#*+  |  increment build of current version (code committed within current life cycle definition)" depends="-previous">
        <property name="requested.major.add" value="0" />
        <property name="requested.minor.add" value="0" />
        <property name="requested.revision.add" value="0" />
        <property name="requested.build.add" value="1" />
    </target>

    <target name="beta" description="#.#.#b0  |  move life cycle to beta (public testing encouraged without any guarantee)" depends="-previous">
        <property name="requested.major.add" value="0" />
        <property name="requested.minor.add" value="0" />
        <property name="requested.revision.add" value="0" />
        <property name="requested.type" value="b" />
        <property name="requested.build" value="0" />
        <property name="requested.build.add" value="0" />
    </target>

    <target name="candidate" description="#.#.#rc0  |  move life cycle to release candidate (functionality no longer intended to change, production release imminent)">
        <property name="requested.major.add" value="0" />
        <property name="requested.minor.add" value="0" />
        <property name="requested.revision.add" value="0" />
        <property name="requested.type" value="rc" />
        <property name="requested.build" value="0" />
        <property name="requested.build.add" value="0" />
    </target>

    <target name="release" description="#.#.#  |  remove life cycle indicator for full production release">
        <property name="requested.release" value="true" />
    </target>

    <target name="revision" description="#.#.+a0  |  increment revision version and reset life cycle to alpha (bug fixes that do not change functionality)">
        <property name="requested.major.add" value="0" />
        <property name="requested.minor.add" value="0" />
        <property name="requested.revision.add" value="1" />
        <property name="requested.type" value="a" />
        <property name="requested.build" value="0" />
        <property name="requested.build.add" value="0" />
    </target>

    <target name="minor" description="#.+.0a0  |  increment minor version and reset life cycle to alpha (new functionality added)">
        <property name="requested.major.add" value="0" />
        <property name="requested.minor.add" value="1" />
        <property name="requested.revision" value="0" />
        <property name="requested.revision.add" value="0" />
        <property name="requested.type" value="a" />
        <property name="requested.build" value="0" />
        <property name="requested.build.add" value="0" />
    </target>

    <target name="major" description="+.0.0a0  |  increment major version and reset life cycle to alpha (existing functionality changed, significant redesign)">
        <property name="requested.major.add" value="1" />
        <property name="requested.minor" value="0" />
        <property name="requested.minor.add" value="0" />
        <property name="requested.revision" value="0" />
        <property name="requested.revision.add" value="0" />
        <property name="requested.type" value="a" />
        <property name="requested.build" value="0" />
        <property name="requested.build.add" value="0" />
    </target>

    <target name="-previous" unless="previous" description="capture and display previous version" depends="-config">
        <property prefix="previous" file="${version.properties}" />
        <property name="previous" value="${previous.major}.${previous.minor}.${previous.revision}${previous.type}${previous.build}" />
        <echo message="previous version was ${previous}" level="info" />
    </target>

    <target name="-validate-version" description="validate version life cycle progression" depends="-previous">
        <property prefix="requested" file="${version.properties}" />
        <property name="requested" value="${requested.major}.${requested.minor}.${requested.revision}${requested.type}${requested.build}" />
        <fail message="previous build was already released; build revision, minor, or major to increment version accordingly">
            <condition>
                <and>
                    <equals arg1="${previous.type}" arg2="" />
                    <or>
                        <equals arg1="${requested.build.add}" arg2="1" />
                        <equals arg1="${requested.type}" arg2="b" />
                        <equals arg1="${requested.type}" arg2="rc" />
                        <istrue value="${requested.release}" />
                    </or>
                </and>
            </condition>
        </fail>
    </target>


    <!-- ======== common targets ======== -->
    
    <target name="-validate-sources">
        <!-- validate source is acceptable to distribute -->
        <fileset id="invalid.sources.stdout" dir="${src.dir}">
            <contains text="System.out.print" />
        </fileset>
        <condition property="invalid.sources">
            <resourcecount when="greater" count="0" refid="invalid.sources.stdout" />
        </condition>

        <pathconvert property="invalid.sources.stdout.joined" refid="invalid.sources.stdout" pathsep="${line.separator}    " />
        <property name="message.sources" value="invalid sources containing 'System.out.print' in:${line.separator}    ${invalid.sources.stdout.joined}" />

        <fail message="${message.sources}${line.separator}release requires valid sources">
            <condition>
                <and>
                    <or>
                        <istrue value="${requested.release}" />
                        <equals arg1="${requested.type}" arg2="" />
                    </or>
                    <istrue value="${invalid.sources}" />
                </and>
            </condition>
        </fail>
    </target>

    <target name="-validate-message" if="invalid.sources">
        <echo message="${message.sources}" level="error" />
    </target>

    <target name="-validate" description="validate project is ready to be built" depends="-validate-version,-validate-sources,-validate-message" />

    <target name="-clean" description="remove any previously generated output" depends="-config">
        <delete dir="${stage.dir}" />
        <delete dir="${dist.dir}" />
    </target>

    <target name="-init" description="initialize build environment" depends="-config,-validate,-init-requested,-init-release,-clean">
        <property prefix="version" file="${version.properties}" />
        <property name="version" value="${version.major}.${version.minor}.${version.revision}${version.type}${version.build}" />
        <echo message="building version ${version}" level="warning" />
    </target>

    <target name="-init-requested" if="requested.build.add" description="update version properties file with requested version">
        <propertyfile file="${version.properties}">
            <entry key="major" value="${requested.major}" type="int" />
            <entry key="major" operation="+" value="${requested.major.add}" type="int" />
            <entry key="minor" value="${requested.minor}" type="int" />
            <entry key="minor" operation="+" value="${requested.minor.add}" type="int" />
            <entry key="revision" value="${requested.revision}" type="int" />
            <entry key="revision" operation="+" value="${requested.revision.add}" type="int" />
            <entry key="type" value="${requested.type}" />
            <entry key="build" value="${requested.build}" type="int" />
            <entry key="build" operation="+" value="${requested.build.add}" type="int" />
        </propertyfile>
    </target>

    <target name="-init-release" if="requested.release" description="update version properties file with release version">
        <propertyfile file="${version.properties}">
            <entry key="type" value="" />
            <entry key="build" value="" />
        </propertyfile>
    </target>

    <target name="dist" description="create distributable Bukkit plugin JAR" depends="-init">
        <mkdir dir="${stage.dir}" />

        <!-- compile source -->
        <javac srcdir="${src.dir}" destdir="${stage.dir}" encoding="utf-8" debug="true" includeantruntime="false">
            <classpath refid="classpath" />
        </javac>

        <!-- generate versioned YAML resources -->
        <copy todir="${stage.dir}" preservelastmodified="true" verbose="true">
            <fileset dir="${resources.dir}" includes="**/*.yml" />
            <filterset>
                <filter token="VERSION" value="${version}" />
            </filterset>
        </copy>

        <!-- package JAR -->
        <mkdir dir="${dist.dir}" />
        <jar basedir="${stage.dir}/" jarfile="${dist.dir}/${plugin.name}.jar">
            <fileset dir="${resources.dir}" excludes="**/*.yml" />
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Built-Date" value="${build.start}" />
                <attribute name="Specification-Title" value="${plugin.name}" />
                <attribute name="Specification-Version" value="${version.major}.${version.minor}" />
                <attribute name="Specification-Vendor" value="${plugin.vendor}" />
                <attribute name="Implementation-Title" value="${plugin.implementation-title}" />
                <attribute name="Implementation-Version" value="${version.revision}${version.type}${version.build}" />
                <attribute name="Implementation-Vendor" value="${plugin.vendor}" />
                <attribute name="Implementation-Url" value="${plugin.implementation-url}" />
                <attribute name="Class-Path" value="${plugin.class-path}" />
            </manifest>
        </jar>
        <delete dir="${stage.dir}" />
    </target>

    <target name="install" description="copy Bukkit plugin JAR to local test server" depends="dist">
        <!-- copy to alternate directory if already in install directory -->
        <copy todir="${install-alt.dir}" verbose="true">
            <fileset file="${dist.dir}/${plugin.name}.jar">
                <present present="both" targetdir="${install.dir}" />
            </fileset>
        </copy>

        <!-- copy to install directory if not already -->
        <copy todir="${install.dir}" verbose="true">
            <fileset file="${dist.dir}/${plugin.name}.jar">
                <present present="srconly" targetdir="${install.dir}" />
            </fileset>
        </copy>
    </target>

    <target name="-debug" depends="-validate">
        <echoproperties />
    </target>

</project>